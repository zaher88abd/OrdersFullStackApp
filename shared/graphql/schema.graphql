# Restaurant Ordering System - GraphQL Schema
# This is the single source of truth for both backend and frontend types

# Enums for order item states and job types
enum OrderItemState {
  PENDING
  PREPARING
  DONE
  DELIVERED
  CANCELED
}

enum JobType {
  MANAGER
  CHEF
  WAITER
}

# Main entity types
type Restaurant {
  id: Int!
  name: String!
  address: String!
  phone: String!
  invoices: [Invoice!]!
  rtables: [RTable!]!
  categories: [Category!]!
  restaurantTeam: [RestaurantTeam!]!
}

type RestaurantTeam {
  uuid: String!
  name: String!
  jobType: JobType!
  restaurantId: Int!
  isActive: Boolean!
  createdAt: String!
  updatedAt: String!
  restaurant: Restaurant!
}

type Invoice {
  id: Int!
  createdAt: String!
  total: Float!
  restaurantId: Int!
  restaurant: Restaurant!
  orders: [Order!]!
}

type Category {
  id: Int!
  name: String!
  restaurantId: Int!
  items: [Item!]!
  restaurant: Restaurant!
}

type RTable {
  id: Int!
  name: String!
  restaurantId: Int!
  orders: [Order!]!
  restaurant: Restaurant!
}

type Item {
  id: Int!
  name: String!
  description: String!
  image: String!
  price: Float!
  categoryId: Int!
  orderItems: [OrderItem!]!
  category: Category!
}

type Order {
  id: Int!
  createdAt: String!
  tableId: Int!
  invoiceId: Int
  rtable: RTable!
  orderItems: [OrderItem!]!
  invoice: Invoice
}

type OrderItem {
  id: Int!
  orderId: Int!
  itemId: Int!
  quantity: Int!
  price: Float!
  state: OrderItemState!
  updatedAt: String!
  order: Order!
  item: Item!
}

# Input types for mutations
input CreateRestaurantInput {
  name: String!
  address: String!
  phone: String!
}

input UpdateRestaurantInput {
  name: String
  address: String
  phone: String
}

input CreateCategoryInput {
  name: String!
  restaurantId: Int!
}

input CreateItemInput {
  name: String!
  description: String!
  image: String!
  price: Float!
  categoryId: Int!
}

input UpdateItemInput {
  name: String
  description: String
  image: String
  price: Float
}

input CreateRTableInput {
  name: String!
  restaurantId: Int!
}

input CreateOrderInput {
  tableId: Int!
}

input CreateOrderItemInput {
  orderId: Int!
  itemId: Int!
  quantity: Int!
  price: Float!
}

input UpdateOrderItemStateInput {
  id: Int!
  state: OrderItemState!
}

input CreateRestaurantTeamInput {
  uuid: String!
  name: String!
  jobType: JobType!
  restaurantId: Int!
  isActive: Boolean
}

input UpdateRestaurantTeamInput {
  name: String
  jobType: JobType
  isActive: Boolean
}

input CreateInvoiceInput {
  total: Float!
  restaurantId: Int!
  orderIds: [Int!]!
}

# Root query and mutation types
type Query {
  restaurants: [Restaurant!]!
  restaurant(id: Int!): Restaurant
  categories(restaurantId: Int!): [Category!]!
  items(categoryId: Int!): [Item!]!
  item(id: Int!): Item
  rtables(restaurantId: Int!): [RTable!]!
  orders(tableId: Int): [Order!]!
  order(id: Int!): Order
  orderItems(orderId: Int!): [OrderItem!]!
  invoices(restaurantId: Int!): [Invoice!]!
  restaurantTeam(restaurantId: Int!): [RestaurantTeam!]!
}

type Mutation {
  createRestaurant(input: CreateRestaurantInput!): Restaurant!
  updateRestaurant(id: Int!, input: UpdateRestaurantInput!): Restaurant!
  deleteRestaurant(id: Int!): Boolean!
  
  createCategory(input: CreateCategoryInput!): Category!
  deleteCategory(id: Int!): Boolean!
  
  createItem(input: CreateItemInput!): Item!
  updateItem(id: Int!, input: UpdateItemInput!): Item!
  deleteItem(id: Int!): Boolean!
  
  createRTable(input: CreateRTableInput!): RTable!
  deleteRTable(id: Int!): Boolean!
  
  createOrder(input: CreateOrderInput!): Order!
  deleteOrder(id: Int!): Boolean!
  
  createOrderItem(input: CreateOrderItemInput!): OrderItem!
  updateOrderItemState(input: UpdateOrderItemStateInput!): OrderItem!
  deleteOrderItem(id: Int!): Boolean!
  
  createRestaurantTeam(input: CreateRestaurantTeamInput!): RestaurantTeam!
  updateRestaurantTeam(uuid: String!, input: UpdateRestaurantTeamInput!): RestaurantTeam!
  deleteRestaurantTeam(uuid: String!): Boolean!
  
  createInvoice(input: CreateInvoiceInput!): Invoice!
}